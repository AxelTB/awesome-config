local setmetatable = setmetatable
local ipairs = ipairs
local button = require("awful.button")
local layout = require("awful.layout")
local tag = require("awful.tag")
local beautiful = require("beautiful")
local capi = { image = image,
               screen = screen,
               widget = widget }

module("awful.widget.layoutmenu")





     
--      testImage3       = widget({ type = "imagebox"})
--      testImage3.image = image("/tmp/flower_crop.jpg")
--      awful.widget.layout.margins[testImage3] = {left = 10, right = 25, top = 10}
--      
--      vicious.register(timeInfo,  testFunc, '$1',1)
-- 
--      
-- 
--      calPopup.box.widgets = {
-- 	calInfo,
-- 	timeInfo,
-- 	testImage3,
-- 	weatherInfo2,
--      }
local function update(w, screen)
    local layout = layout.getname(layout.get(screen))
    if layout and beautiful["layout_" ..layout] then
        w.image = capi.image(beautiful["layout_" ..layout])
    else
        w.image = nil
    end
end

--- Create a layoutbox widget. It draws a picture with the current layout
-- symbol of the current tag.
-- @param screen The screen number that the layout will be represented for.
-- @param args Standard arguments for an imagebox widget.
-- @return An imagebox widget configured as a layoutbox.
function new(screen, args)
    local screen = screen or 1
    local args = args or {}
    args.type = "imagebox"
    local w = capi.widget(args)
    local menu = create()
    update(w, screen)
    
    w:buttons( awful.util.table.join(
    awful.button({ }, 1, function()
        menu.visible = not menu.visible
    end),
    awful.button({ }, 4, function()
        
    end),
    awful.button({ }, 5, function()
        
    end)
))

    local function update_on_tag_selection(tag)
        return update(w, tag.screen)
    end

    tag.attached_add_signal(screen, "property::selected", update_on_tag_selection)
    tag.attached_add_signal(screen, "property::layout", update_on_tag_selection)

    return w
end

function create()
  calPopup = naughty.notify({
                   text = "test",
                   timeout = 0, hover_timeout = 0.5,
                   width = 150, screen = mouse.screen
               })
end

setmetatable(_M, { __call = function(_, ...) return new(...) end })